//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/_Pisicute/Scripts/Input/InputControlSchemes.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControlSchemes: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControlSchemes()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControlSchemes"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""4d9cbee1-9c45-4b28-be1c-083af69b2263"",
            ""actions"": [
                {
                    ""name"": ""Select Cell"",
                    ""type"": ""Button"",
                    ""id"": ""27725680-59fe-4e20-8e20-4b1cfdafa150"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5b9f5b9a-aa4b-4634-820e-a4588d41fa9b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Select Cell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map Editor"",
            ""id"": ""8032e8b4-1a26-4935-a636-7a479d8ff6e9"",
            ""actions"": [
                {
                    ""name"": ""Select Cell"",
                    ""type"": ""Button"",
                    ""id"": ""2436da03-3ece-40c7-a0bb-c8977bc80718"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""48471669-c13c-4019-8571-d9dd053473f6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Select Cell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""K&M"",
            ""bindingGroup"": ""K&M"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_SelectCell = m_Player.FindAction("Select Cell", throwIfNotFound: true);
        // Map Editor
        m_MapEditor = asset.FindActionMap("Map Editor", throwIfNotFound: true);
        m_MapEditor_SelectCell = m_MapEditor.FindAction("Select Cell", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_SelectCell;
    public struct PlayerActions
    {
        private @InputControlSchemes m_Wrapper;
        public PlayerActions(@InputControlSchemes wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectCell => m_Wrapper.m_Player_SelectCell;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @SelectCell.started += instance.OnSelectCell;
            @SelectCell.performed += instance.OnSelectCell;
            @SelectCell.canceled += instance.OnSelectCell;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @SelectCell.started -= instance.OnSelectCell;
            @SelectCell.performed -= instance.OnSelectCell;
            @SelectCell.canceled -= instance.OnSelectCell;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Map Editor
    private readonly InputActionMap m_MapEditor;
    private List<IMapEditorActions> m_MapEditorActionsCallbackInterfaces = new List<IMapEditorActions>();
    private readonly InputAction m_MapEditor_SelectCell;
    public struct MapEditorActions
    {
        private @InputControlSchemes m_Wrapper;
        public MapEditorActions(@InputControlSchemes wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectCell => m_Wrapper.m_MapEditor_SelectCell;
        public InputActionMap Get() { return m_Wrapper.m_MapEditor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapEditorActions set) { return set.Get(); }
        public void AddCallbacks(IMapEditorActions instance)
        {
            if (instance == null || m_Wrapper.m_MapEditorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapEditorActionsCallbackInterfaces.Add(instance);
            @SelectCell.started += instance.OnSelectCell;
            @SelectCell.performed += instance.OnSelectCell;
            @SelectCell.canceled += instance.OnSelectCell;
        }

        private void UnregisterCallbacks(IMapEditorActions instance)
        {
            @SelectCell.started -= instance.OnSelectCell;
            @SelectCell.performed -= instance.OnSelectCell;
            @SelectCell.canceled -= instance.OnSelectCell;
        }

        public void RemoveCallbacks(IMapEditorActions instance)
        {
            if (m_Wrapper.m_MapEditorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapEditorActions instance)
        {
            foreach (var item in m_Wrapper.m_MapEditorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapEditorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapEditorActions @MapEditor => new MapEditorActions(this);
    private int m_KMSchemeIndex = -1;
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("K&M");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnSelectCell(InputAction.CallbackContext context);
    }
    public interface IMapEditorActions
    {
        void OnSelectCell(InputAction.CallbackContext context);
    }
}
