//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/_Pisicute/Scripts/Input/InputControlSchemes.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControlSchemes: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControlSchemes()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControlSchemes"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""4d9cbee1-9c45-4b28-be1c-083af69b2263"",
            ""actions"": [
                {
                    ""name"": ""Select Cell"",
                    ""type"": ""Button"",
                    ""id"": ""27725680-59fe-4e20-8e20-4b1cfdafa150"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5b9f5b9a-aa4b-4634-820e-a4588d41fa9b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Select Cell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map Editor"",
            ""id"": ""8032e8b4-1a26-4935-a636-7a479d8ff6e9"",
            ""actions"": [
                {
                    ""name"": ""Select Cell"",
                    ""type"": ""Button"",
                    ""id"": ""2436da03-3ece-40c7-a0bb-c8977bc80718"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Create Unit"",
                    ""type"": ""Button"",
                    ""id"": ""c07e9965-d2fc-4068-b219-9734e34c3171"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Destroy Unit"",
                    ""type"": ""Button"",
                    ""id"": ""f944684b-6d51-4c5c-9ae2-6cbd287cf7aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""48471669-c13c-4019-8571-d9dd053473f6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Select Cell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a34dca6f-6693-4d1e-a169-a5cb4f2a6f72"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Create Unit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""33940791-1647-4aa8-9b03-c0343956b01f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Destroy Unit"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""cfecfdf7-46ee-40d7-80e9-1702fd198cf5"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Destroy Unit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""17de972d-b36f-4394-9f7e-c7f4b2d1ad7a"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Destroy Unit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""02c3857a-274d-4187-bff6-a8685c354336"",
            ""actions"": [
                {
                    ""name"": ""Camera Pan"",
                    ""type"": ""Value"",
                    ""id"": ""e1d9ab21-7b34-41bc-b7cb-c42a711b9053"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Camera Orbit"",
                    ""type"": ""Button"",
                    ""id"": ""e2b4ed3d-a459-4379-8d72-029851e6c1e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""6b918b82-68c3-46e2-9f65-10ccf9351ff0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate Orbit"",
                    ""type"": ""Button"",
                    ""id"": ""64fa5c43-e0fa-408a-982d-a9fa06a37c00"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""23ff6fa7-16f0-4763-a258-ed354d8d9b54"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": ""K&M"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b48e97f-ca62-4cd9-ac05-95b13f0fea49"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Camera Orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c150f9de-20f5-425c-9949-a4aaa0618a2b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Camera Pan"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e2e77e3f-68b5-4147-ae0a-c7c5916d4775"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Camera Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bebcf89a-7948-4850-a0ba-fddc57834514"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Camera Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8e9b0e55-d58a-41ff-8a9c-a9946484ae8e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Camera Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""791981fe-dbe6-4762-889b-917bbe75b3e3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Camera Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f614ea3d-d4ce-4217-ad48-5eb9446bd646"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&M"",
                    ""action"": ""Activate Orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""K&M"",
            ""bindingGroup"": ""K&M"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_SelectCell = m_Player.FindAction("Select Cell", throwIfNotFound: true);
        // Map Editor
        m_MapEditor = asset.FindActionMap("Map Editor", throwIfNotFound: true);
        m_MapEditor_SelectCell = m_MapEditor.FindAction("Select Cell", throwIfNotFound: true);
        m_MapEditor_CreateUnit = m_MapEditor.FindAction("Create Unit", throwIfNotFound: true);
        m_MapEditor_DestroyUnit = m_MapEditor.FindAction("Destroy Unit", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_CameraPan = m_Camera.FindAction("Camera Pan", throwIfNotFound: true);
        m_Camera_CameraOrbit = m_Camera.FindAction("Camera Orbit", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        m_Camera_ActivateOrbit = m_Camera.FindAction("Activate Orbit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_SelectCell;
    public struct PlayerActions
    {
        private @InputControlSchemes m_Wrapper;
        public PlayerActions(@InputControlSchemes wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectCell => m_Wrapper.m_Player_SelectCell;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @SelectCell.started += instance.OnSelectCell;
            @SelectCell.performed += instance.OnSelectCell;
            @SelectCell.canceled += instance.OnSelectCell;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @SelectCell.started -= instance.OnSelectCell;
            @SelectCell.performed -= instance.OnSelectCell;
            @SelectCell.canceled -= instance.OnSelectCell;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Map Editor
    private readonly InputActionMap m_MapEditor;
    private List<IMapEditorActions> m_MapEditorActionsCallbackInterfaces = new List<IMapEditorActions>();
    private readonly InputAction m_MapEditor_SelectCell;
    private readonly InputAction m_MapEditor_CreateUnit;
    private readonly InputAction m_MapEditor_DestroyUnit;
    public struct MapEditorActions
    {
        private @InputControlSchemes m_Wrapper;
        public MapEditorActions(@InputControlSchemes wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectCell => m_Wrapper.m_MapEditor_SelectCell;
        public InputAction @CreateUnit => m_Wrapper.m_MapEditor_CreateUnit;
        public InputAction @DestroyUnit => m_Wrapper.m_MapEditor_DestroyUnit;
        public InputActionMap Get() { return m_Wrapper.m_MapEditor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapEditorActions set) { return set.Get(); }
        public void AddCallbacks(IMapEditorActions instance)
        {
            if (instance == null || m_Wrapper.m_MapEditorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapEditorActionsCallbackInterfaces.Add(instance);
            @SelectCell.started += instance.OnSelectCell;
            @SelectCell.performed += instance.OnSelectCell;
            @SelectCell.canceled += instance.OnSelectCell;
            @CreateUnit.started += instance.OnCreateUnit;
            @CreateUnit.performed += instance.OnCreateUnit;
            @CreateUnit.canceled += instance.OnCreateUnit;
            @DestroyUnit.started += instance.OnDestroyUnit;
            @DestroyUnit.performed += instance.OnDestroyUnit;
            @DestroyUnit.canceled += instance.OnDestroyUnit;
        }

        private void UnregisterCallbacks(IMapEditorActions instance)
        {
            @SelectCell.started -= instance.OnSelectCell;
            @SelectCell.performed -= instance.OnSelectCell;
            @SelectCell.canceled -= instance.OnSelectCell;
            @CreateUnit.started -= instance.OnCreateUnit;
            @CreateUnit.performed -= instance.OnCreateUnit;
            @CreateUnit.canceled -= instance.OnCreateUnit;
            @DestroyUnit.started -= instance.OnDestroyUnit;
            @DestroyUnit.performed -= instance.OnDestroyUnit;
            @DestroyUnit.canceled -= instance.OnDestroyUnit;
        }

        public void RemoveCallbacks(IMapEditorActions instance)
        {
            if (m_Wrapper.m_MapEditorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapEditorActions instance)
        {
            foreach (var item in m_Wrapper.m_MapEditorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapEditorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapEditorActions @MapEditor => new MapEditorActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_CameraPan;
    private readonly InputAction m_Camera_CameraOrbit;
    private readonly InputAction m_Camera_Zoom;
    private readonly InputAction m_Camera_ActivateOrbit;
    public struct CameraActions
    {
        private @InputControlSchemes m_Wrapper;
        public CameraActions(@InputControlSchemes wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraPan => m_Wrapper.m_Camera_CameraPan;
        public InputAction @CameraOrbit => m_Wrapper.m_Camera_CameraOrbit;
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputAction @ActivateOrbit => m_Wrapper.m_Camera_ActivateOrbit;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @CameraPan.started += instance.OnCameraPan;
            @CameraPan.performed += instance.OnCameraPan;
            @CameraPan.canceled += instance.OnCameraPan;
            @CameraOrbit.started += instance.OnCameraOrbit;
            @CameraOrbit.performed += instance.OnCameraOrbit;
            @CameraOrbit.canceled += instance.OnCameraOrbit;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @ActivateOrbit.started += instance.OnActivateOrbit;
            @ActivateOrbit.performed += instance.OnActivateOrbit;
            @ActivateOrbit.canceled += instance.OnActivateOrbit;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @CameraPan.started -= instance.OnCameraPan;
            @CameraPan.performed -= instance.OnCameraPan;
            @CameraPan.canceled -= instance.OnCameraPan;
            @CameraOrbit.started -= instance.OnCameraOrbit;
            @CameraOrbit.performed -= instance.OnCameraOrbit;
            @CameraOrbit.canceled -= instance.OnCameraOrbit;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @ActivateOrbit.started -= instance.OnActivateOrbit;
            @ActivateOrbit.performed -= instance.OnActivateOrbit;
            @ActivateOrbit.canceled -= instance.OnActivateOrbit;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    private int m_KMSchemeIndex = -1;
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("K&M");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnSelectCell(InputAction.CallbackContext context);
    }
    public interface IMapEditorActions
    {
        void OnSelectCell(InputAction.CallbackContext context);
        void OnCreateUnit(InputAction.CallbackContext context);
        void OnDestroyUnit(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnCameraPan(InputAction.CallbackContext context);
        void OnCameraOrbit(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnActivateOrbit(InputAction.CallbackContext context);
    }
}
